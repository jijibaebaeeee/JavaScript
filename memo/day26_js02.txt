day26

복습 -> 변수 -> 형변환 -> 연산자 -> 제어문 -> 프로그래밍 패러다임 -> 배열 -> 함수 -> 객체

0. 복습
1) 자바스크립트(javascript)
   객체 기반의 스크립트 언어
   인터프리터 언어
   타입을 명시하지 않음(동적 바인딩)
   프로토타입 기반의 객체지향언어
- 웹페이지에서의 역할   
   사용자의 입력 및 계산
   웹페이지의 내용 및 모양의 동적 제어
   브라우저 제어
   웹서버와의 통신(Ajax 등 비동기 통신)
   웹 어플리케이션 작성(API)
   
- 장점
   웹페이지의 반응성 향상
   효율적인 데이터 전송
   사용자와 상호작용할 수 있는 다양한 기능

2) 자바스크립트 작성 위치
   html 태그의 이벤트 리스너 속성에 작성
   <script></script> 내에 작성
   자바스크립트 파일에 작성
   url 부분에 작성

3) 데이터 타입
- 기본타입
   숫자타입 number : infinity, NaN, -10, 5.3, ..
   논리타입 boolean : true, false
   문자열타입 string : "", '', ``
   undefined : 타입이 정해지지 않은 것을 의미한다
   null : 값이 없음을 의도적으로 작성시 사용, 값이 정해지지 않은 값이다
   Symbol : 고유하고 변경불가능한 값을 생성하는 타입, 객체의 속성키로 주로 사용된다
- 객체타입
   object
   array
   function


1. 변수
	하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 불리는 이름
	(값의 위치를 가리키는 상징적인 이름)
  0) java에서 변수선언
	자료형 = 변수명;
	변수명 = 값;

	자료형 변수명 = 값;

  1) javascript에서 변수선언
	var 변수명 = 값; 
	let 변수명 = 값;


  +) 상수선언	const 상수명 = 값;
	var는 ES6이전에 주로 사용하던 변수 선언 키워드, 함수 스코프를 가진다
	var로 선언된 변수가 함수 내에서만 지역변수로 작동하고 함수 외부에서는 전역변수로 작동된다

	let, const는 ES6에서 도입된 변수 선언 키워드, 블록 스코프를 가진다
	let, const 키워드로 선언된 변수가 {}중괄호로 둘러싸인 블록 내에서만 유효하다는 것을 의미한다.

  +) 변수, 상수 선언
	자바스크립트는 자바와 달리 변수나 상수를 만들 때, 자료형을 명시하지 않는다
	변수에 값이 저장될 때, 값의 자료형에 따라서 변수의 타입이 정해지게 되고 이를 동적 바인딩이라고 한다.

  +) var 키워드 단점
	var 키워드를  사용하여 만든 변수는 함수 레벨 스코프를 지원한다는 것이다.
	그러므로 변수를 선언할 때 let을 사용하는 것을 권장한다
	
	함수 레벨 스코프 : 변수가 만들어진 함수의 영역의 전체에서 유효함
	블록 레벨 스코프 : 변수가 만들어진 {} 영역에서만 유효함

  2) 호이스팅
	자바스크립의 변수, 함수 등의 모든 선언문은 코드 실행단계 이전에 먼저 실행이 된다
	이러한 특징을 호이스팅이라고 한다
	var 키워드로 변수를 만들면 호이스팅과 동시에 undefined 로 값을 초기화 시킨다
	let 키워드로 변수를 만들면 호이스팅은 되지만 초기화 시키지 않는다(나중에 초기화 됨)

	함수가 실행되기 전에 자바스크립트 paser가 함수 실행 전 해당 함수를 훑는 과정에서
	함수 내에서 존재하는 내용 중 함수가 실행에 필요한 값들을 끌어올리는 것이다

  +) var, let
    var   
   	함수 레벨 스코프 : 함수 내 어디서든 접근 가능
   	재선언 가능 : 같은 스코프 내에서 동일한 변수 이름을 여러번 선언 가능
   	초기화 전 접근가능 : 변수가 선언되기 전에 접근하면 undefined 값을 가짐

    let
  	블록 레벨 스코프 : {} 중괄호 내에서만 접근 가능
  	재선언 불가 : 같은 스코프 내에서 동일한 변수 이름을 다시 선언할 수 없음
   	초기화 전 접근불가 : 변수가 선언되기 전에 접근하면 참조에러(Reference Error)가 발생함


3) 상수
	const 키워드
	const 상수명 = 값;
	값을 변경할 수 없어야할 때 사용한다
	let과 호이스팅 동작방식이 같고(초기화 전 사용x) 값을 변경할 수 없다

    ※ let, var, const 모두 호이스팅은 되지만, 초기화가 var 말고는 안돼서 안된다.


2. 형변환
	타입 확인하는 연산자 : typeof x
	타입 확인하는 함수 : typeof(x)

	함수와 연산자에 전달되는 값은 자동 형변환
	수학관련 연산자가 전달받은 값은 숫자타입으로 자동 형변환
	alert() 전달받은 값은 해당 값의 자료형과 상관없이 문자열로 자동 형변환

- 문자형변환
	alert(vale) // value는 문자형이어야한다
		    // value가 문자형이 아닌 숫자타입, 논리형 타입 등 다른 자료형의 값을 전달받으면 문자형으로 자동형변환
	String(value) // String()함수를 호출해 전달받은 값을 문자열로 변환 가능

	java에서 문자열로 형변환 => 다른타입의 값 + ""

- 숫자형변환
	alert("6"/"3") // 결과는 2 문자열이 숫자형으로 자동 변환된 후 연산이 수행된다
	Number(value) // number()함수를 호출해 전달받은 값을 숫자형으로 명시하여 변환가능

- 불린형변환
	Boolean(value)
		// 숫자 0, 빈문자열 "", null, undefined, NaN => 비어있는 값 false
		// 비어있는 값을 제외한 모든 값 => true
		// "0", " " => true  

3. alert(), confirm(), prompt()
	웹 페이지에서 사용자와 상호작용하기 위해 사용되는 간단한 대화상자를 만드는 함수
	- alert() : 단순한 정보를 사용자에게 표시하기 위해 사용된다
		    사용자가 확인 버튼을 클릭하기 전까지는 아무런 작업도 할 수 없다
	- confirm() : 사용자에게 "예" or "아니오" 선택지를 제공하는 대화상자
		      사용자가 선택을 하고 나면 해당 선택에 따라 다른 작업을 수행할 수 있다
	- prompt() : 사용자에게 입력받을 수 있는 칸을 제공하는 대화상자
		     사용자가 입력할 수 있는 칸이 있고 "확인" or "취소" 선택지가 존재하여 선택에 따른 다른 작업을 수행할 수 있다.


4. 연산자(operator)
   최단산쉬관리삼대
1) 최우선연산자
   자바와 동일

2) 단항연산자
   자바와 동일
   연산자를 기준으로 피연산자(항1개)가 1개인 것을 의미
   
   ++
   --
   +
   -
   !

3) 이항연산자
   연산자를 기준으로 피연산자(항2개)가 2개인 것을 의미

    - 산술연산자(+, -, *, /, %)
   자바와 동일
   + 문자와 문자 연결, 문자와 숫자 연결, 숫자와 숫자와 문자 숫자끼리 연산 문자열 연결, 숫자와 숫자 연산

    - 할당연산자
   자바와 동일
   +=, -=, *=, /=, %=

    - 쉬프트연산자
   자바와 동일
   <<, >>, ~
   피연산자 << 비트수 
   피연산자를 명시한 비트수만큼 이동시킨다

    - 관계연산자
   자바와 동일 >, <, >=, <=
   ==   동등비교연산자, 값만 같은지
   ===   일치비교연산자, 값과 타입이 같은지
   !=   부등비교연산자, 값만 다른지
   !==   불일치비교연산자, 값과 타입이 다른지

    - 논리연산자
   || 논리합(or) 둘 중 하나라도 true면 true
      조건식 || 값 사용되었을경우, 값이 false일 때 || 초기값

   && 논리곱(and) 둘 다 true면 true
      선행조건식이 true면 뒤에 있는 값이 실행된다
      성능을 위해서 앞에있는 조건식이 false면 뒤에 있는 문장을 실행하지 않는다

   부정(not) !true일 때 false, !false 일 때 true

   ?? 병합연산자  null 또는 undefined인 경우에만 오른쪽 값을 반환한다
      ?.   옵셔널체이닝(Optional Chanining)
      객체에서 undefined나 null에 접근할 경우 에러가 발생한다
      안전하게 객체의 프로퍼티에 접근하기 위해서 사용한다

    - 대입연산자, 할당연산자
   	자바와 동일
   	=


5. 제어문
   자바와 동일
 1) 조건문
   if문 -> 관계연산자로 조건을 비교할 때
   switch문 -> 하나의 변수에 여러 값이 담길 수 있을 때

 2) 반복문
   for문   -> 반복횟수나 범위 알 때
   while문    -> 반복횟수를 알지 못할 때, 조건이 주어졌을 때
   do~while문 -> 무조건 한 번 실행한 뒤 조건에 따라 반복할 때

 3) 기타제어문
   break문   -> 강제탈출(반복문), switch문 case마다 종료할 때
   continue문 -> 다음 반복으로 넘어갈 때 



6. 문자열 사용하기
   문자열값을 다른 값과 함께 표현하는 방법
   - 문자열 연결을 이용한다
   - 템플릿문자열을 이용한다(백틱사용)
   
   let name = "홍길동";
   console.log("제 이름은 " + name + "입니다.");
   console.log(`제 이름은 ${name}입니다`);



7. 프로그래밍 패러다임
	소프트웨어 개발에서 문제를 해결하기 위한 접근 방식을 의미한다
	개발자가 어떤 사고방식으로 코드를 작성할지를 결정하며 개발 방법론에도 영향을 준다
	
  1) 패러다임의 종류
    - 명령형 프로그래밍
	어떻게(How) 작업을 수행할 지 명시적으로 지정하는 방식
	컴퓨터가 실행해야할 명령어를 순서대로 작성하며 상태를 변경하고 명령을 실행하는 흐름을 중시
	
	* 절차지향 프로그래밍 : 프로그램을 순서대로 처리하며 단계적으로 문제를 해결한다
			  컴퓨터의 작동방식과 유사하여 처리속도가 빠르다
			  코드가 순차적으로 실행되므로 이해하기 쉽다
			  프로그램이 커지면 유지보수가 어려워질 수 있다
			  ex) C, Cobol, Fortran

	* 객체지향 프로그래밍 : 프로그램을 객체의 상호작용으로 작성한다
			  복잡한 시스템을 모델링하기 용이하다
			  학습곡선이 상대적으로 높을 수 있다
			  ex) Java, Python, C++

    - 선언형 프로그래밍
	무엇을(What) 해야하는지에 초점을 맞추어 구체적으로 어떤 방식으로 실행할지보다는 결과는 정의하는 것이 중요
	
	* 함수형 프로그래밍(FP) : 순수함수(Pure Function)를 조합하여 프로그램을 작성한다
			     함수는 입력값만 사용하며 외부 상태를 변경하지 않는다
			     데이터의 불변성(Immutability)을 유지한다
			     코드를 재사용하고, 디버깅이 쉽다
			     ex) Haskell, javascript(부분적지원)
	 

  +) 소프트웨어 개발 방법론 (정처기)
	소프트웨어를 효율적으로 개발하기 위해 체계적이고 구조화된 접근방법을 제공한다

	방법론		특징			장점			단점
	폭포수모델		단계별개발, 명확한순서		이해가 쉬움, 문서화가 잘됨	요구사항 변경에 유연하지 않음
	애자일		반복적, 고객 피드백 중시	유연성, 고객과의 지속 소통O	명확한 계획이 없어 혼란 발생 가능
	나선형모델		반복적, 리스크 관리 강조	리스크 감소, 점진적 개선 가능	관리가 복잡함, 비용증가
	RAD		프로토타입 활용,빠른개발	개발속도 빠름, 요구사항 즉각반영	품질이 저하 가능성, 대규모프로젝트 부적합
	V-모델		개발과 테스트 병행		품질 보장, 결함 발견 시점 빠름	유연성 부족, 테스트 비용 높음
	XP(애자일일부)	테스트 주도 개발,지속적 통합	코드 품질 보장, 요구사항 즉각반영	팀 역량과 협업 중요










리뷰쓰기
책사기





















